import com.github.spotbugs.snom.SpotBugsTask
import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'org.springframework.boot' version '2.6.4' apply false
    id 'com.github.spotbugs' version '5.0.6'
    id 'com.diffplug.spotless' version '6.5.1'
    id 'com.github.nbaztec.coveralls-jacoco' version '1.2.14'
    id 'org.owasp.dependencycheck' version '7.1.0.1'
}

allprojects {
    group = 'dev.vox.platform.kahpp'
    version = '0.0.1-SNAPSHOT'
    if (project.hasProperty('projVersion')) {
        project.version = project.projVersion
    }
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
    }
}

def rootBuildDir = project.buildDir.path
def root = project.rootDir.path
subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'pmd'
    apply plugin: 'jacoco'
    apply plugin: 'com.github.nbaztec.coveralls-jacoco'
    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'signing'

    dependencyManagement {
        imports {
            mavenBom SpringBootPlugin.BOM_COORDINATES
        }
    }

    dependencies {
        implementation("com.github.spotbugs:spotbugs-annotations:4.6.0")
        pmd("net.sourceforge.pmd:pmd-java:6.20.0") {
            exclude group: 'commons-io', module: 'commons-io'
        }
        pmd("commons-io:commons-io:2.7")
    }

    test {
        useJUnitPlatform()
    }

    pmd {
        ignoreFailures = false
        consoleOutput = true
        incrementalAnalysis = true
        setRuleSetFiles(layout.files("$root/config/pmd-ruleset.xml"))
        ruleSets = []
    }

    spotbugs {
        excludeFilter = file("$root/config/spotbugs-exclude.xml")
    }

    tasks.withType(SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
        auxClassPaths = sourceSets.getByName("main").compileClasspath + sourceSets.getByName("test").compileClasspath
    }

    jacoco {
        toolVersion = "0.8.7"
        jacocoTestReport {
            dependsOn test
            reports {
                xml.enabled true
                xml.destination file("$rootBuildDir/reports/jacoco/test/jacocoTestReport.xml")
                html.destination file("${rootBuildDir}/jacocoHtml")
            }
        }
        jacocoTestCoverageVerification {
            violationRules {
                rule {
                    element = 'CLASS'
                    limit {
                        counter = 'INSTRUCTION'
                        value = 'COVEREDRATIO'
                        minimum = 0.92
                    }
                    excludes = [
                        // No need to test the main method...
                        'dev.vox.platform.kahpp.Application',
                        // No need to test these internal classes
                        'dev.vox.platform.kahpp.configuration.TransformRecord.JmesPathMutation',
                        'dev.vox.platform.kahpp.configuration.TransformRecord.RemoveFieldMutation',
                        // This class need a strong refactor
                        'dev.vox.platform.kahpp.test.instance.InstanceTest',
                    ]
                }
            }
        }
    }

    jacocoTestCoverageVerification.dependsOn(jacocoTestReport, test)
    check.dependsOn(jacocoTestCoverageVerification)

    coverallsJacoco {
        reportPath = file("$rootBuildDir/reports/jacoco/test/jacocoTestReport.xml")
    }

    spotless {
        java {
            googleJavaFormat()
            removeUnusedImports()
            trimTrailingWhitespace()
        }
    }

    publishing {
        repositories {
            maven {
                name = 'githubRepository'
                url = uri('https://maven.pkg.github.com/getfeedback/kahpp-oss')
                credentials(PasswordCredentials)
            }
        }
    }

    signing {
        if (project.hasProperty("signJar")) {
            useInMemoryPgpKeys(System.getenv('PGP_KEY'), System.getenv('PGP_PSW'))
            sign publishing.publications
        }
    }
}

spotless {
    groovyGradle {
        greclipse()
        indentWithSpaces()
    }
}

dependencyCheck {
    failBuildOnCVSS = 4.0
    suppressionFile = "$root/config/dependency-check-suppression.xml"
}
